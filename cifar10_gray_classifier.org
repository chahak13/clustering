#+TITLE: Cifar10 Grayscale Classifier
#+AUTHOR: Chahak Mehta
#+property: header-args :session /ssh:pho-sach:/oden/cmehta/.local/share/jupyter/runtime/kernel-39dbe229-8570-4dd9-84ad-46080017bdea.json :async yes :eval no-export :exports both :tangle cifar10_gray_classifier.py

* Imports

#+begin_src jupyter-python
import torch
import torchvision
import torchvision.transforms as transforms
#+end_src

#+RESULTS:
* Load CIFAR-10

#+begin_src jupyter-python
from functools import partial

def compress_img(img, k):
    U, D, V = torch.linalg.svd(img, full_matrices=False)
    compressed_img = torch.matmul(U[..., :k], torch.diag_embed(D[..., :k]))
    compressed_img = torch.matmul(compressed_img, V[..., :k, :])
    return compressed_img

transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Grayscale(num_output_channels=1),
     transforms.Normalize((0.5), (0.5))])

svd_transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Grayscale(num_output_channels=1),
     transforms.Lambda(partial(compress_img, k=5)),
     transforms.Normalize((0.5), (0.5))])

batch_size = 4

trainset = torchvision.datasets.CIFAR10(root='/workspace/CHAHAK/dsml/project/data/cifar-10-batches-py', train=True,
                                        download=True, transform=svd_transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,
                                          shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(root='/workspace/CHAHAK/dsml/project/data/cifar-10-batches-py', train=False,
                                       download=True, transform=svd_transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,
                                         shuffle=False, num_workers=2)

classes = ('plane', 'car', 'bird', 'cat',
           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')
#+end_src

#+RESULTS:
: Files already downloaded and verified
: Files already downloaded and verified

Confirming SVD tranformation
#+begin_src jupyter-python
from functools import partial

dataiter = iter(trainloader)
images, labels = dataiter.next()
svdtrans = transforms.Lambda(partial(compress_img, k=5))
svdtrans(images).shape
#+end_src

#+RESULTS:
: torch.Size([4, 1, 32, 32])

Checking some random images

#+begin_src jupyter-python
import matplotlib.pyplot as plt
import numpy as np

# functions to show an image
def imshow(img):
    img = img / 2 + 0.5     # unnormalize
    npimg = img.numpy()
    fig, ax = plt.subplots(figsize=(6, 6))
    ax.imshow(npimg.squeeze(), cmap="gray")
    ax.grid(False)

# get some random training images
dataiter = iter(trainloader)
images, labels = dataiter.next()

# show images
imshow(images[0])
# print labels
# print(' '.join(f'{classes[labels[j]]:5s}' for j in range(batch_size)))
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/d706ffee298f3bb3d354e8db40554918929feded.png]]



* Convolutional Neural Network

#+begin_src jupyter-python
import torch.nn as nn
import torch.nn.functional as F


class GrayNet(nn.Module):
    def __init__(self):
        super().__init__()
        self.conv1 = nn.Conv2d(1, 6, 5)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 5)
        self.fc1 = nn.Linear(16 * 5 * 5, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = torch.flatten(x, 1) # flatten all dimensions except batch
        x = F.relu(self.fc1(x))
        embedding = F.relu(self.fc2(x))
        # embedding = x.clone()
        x = self.fc3(embedding)
        return x, embedding
#+end_src

#+RESULTS:

* Loss function and optimizer, and Training

#+begin_src jupyter-python
import torch.optim as optim

criterion = nn.CrossEntropyLoss()
net = GrayNet()
optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)


for epoch in range(5):  # loop over the dataset multiple times

    running_loss = 0.0
    for i, data in enumerate(trainloader, 0):
        # get the inputs; data is a list of [inputs, labels]
        inputs, labels = data
        # zero the parameter gradients
        optimizer.zero_grad()

        # forward + backward + optimize
        outputs, _ = net(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        # print statistics
        running_loss += loss.item()
        if i % 2000 == 1999:    # print every 2000 mini-batches
            print(f'[{epoch + 1}, {i + 1:5d}] loss: {running_loss / 2000:.3f}')
            running_loss = 0.0

print('Finished Training')
#+end_src

#+RESULTS:
#+begin_example
[1, 10000] loss: 1.706
[1, 12000] loss: 1.665
[2,  2000] loss: 1.598
[2,  4000] loss: 1.567
[2,  6000] loss: 1.528
[2,  8000] loss: 1.511
[2, 10000] loss: 1.503
[2, 12000] loss: 1.481
[3,  2000] loss: 1.396
[3,  4000] loss: 1.398
[3,  6000] loss: 1.409
[3,  8000] loss: 1.372
[3, 10000] loss: 1.386
[3, 12000] loss: 1.374
[4,  2000] loss: 1.286
[4,  4000] loss: 1.283
[4,  6000] loss: 1.292
[4,  8000] loss: 1.314
[4, 10000] loss: 1.279
[4, 12000] loss: 1.290
[5,  2000] loss: 1.204
[5,  4000] loss: 1.216
[5,  6000] loss: 1.214
[5,  8000] loss: 1.228
[5, 10000] loss: 1.227
[5, 12000] loss: 1.224
Finished Training
[1,  2000] loss: 2.249
[1,  4000] loss: 2.054
[1,  6000] loss: 1.903
[1,  8000] loss: 1.775
[1, 10000] loss: 1.726
[1, 12000] loss: 1.667
[2,  2000] loss: 1.593
[2,  4000] loss: 1.587
[2,  6000] loss: 1.560
[2,  8000] loss: 1.544
[2, 10000] loss: 1.533
[2, 12000] loss: 1.498
[3,  2000] loss: 1.445
[3,  4000] loss: 1.425
[3,  6000] loss: 1.426
[3,  8000] loss: 1.415
[3, 10000] loss: 1.415
[3, 12000] loss: 1.422
[4,  2000] loss: 1.332
[4,  4000] loss: 1.331
[4,  6000] loss: 1.343
[4,  8000] loss: 1.332
[4, 10000] loss: 1.348
[4, 12000] loss: 1.335
[5,  2000] loss: 1.248
[5,  4000] loss: 1.275
[5,  6000] loss: 1.270
[5,  8000] loss: 1.277
[5, 10000] loss: 1.269
[5, 12000] loss: 1.270
Finished Training
#+end_example


** Save model

#+begin_src jupyter-python
model_path = '/workspace/CHAHAK/dsml/project/data/cifar_grayscale_svd_trained.pth'
torch.save(net.state_dict(), model_path)
#+end_src

#+RESULTS:
